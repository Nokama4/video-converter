{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/carine/Desktop/video-converter/app/root.tsx", "/Users/carine/Desktop/video-converter/app/routes/video/$videoId.tsx", "../app/components/Video/index.tsx", "../app/utils/videos.server.ts", "/Users/carine/Desktop/video-converter/app/routes/create.tsx", "../app/utils/s3.server.ts", "../app/utils/elemental.server.ts", "../app/components/display/Upload.tsx", "/Users/carine/Desktop/video-converter/app/routes/index.tsx", "../app/components/List/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction, LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport styles from \"./styles/tailwind.css\";\nimport videoStyles from \"./styles/custom-style.css\";\nimport videoJsStyle from 'video.js/dist/video-js.css'\n\nexport function links() {\n  return [\n    { rel: \"stylesheet\", href: styles },\n    { rel: \"stylesheet\", href: videoStyles },\n    { rel: \"stylesheet\", href: videoJsStyle },\n  ];\n}\n\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport VideoPlayer from '~/components/Video'\nimport { getVideo } from '~/utils/videos.server'\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  console.log(params);\n  \n  if (params.videoId) {\n    const video = await getVideo(params?.videoId);\n    if (!video) {\n      throw new Response(\"Not Found\", { status: 404 });\n    }\n  \n    console.log(video);\n    \n    return json(video);\n  \n  }\n};\n\nconst Video = () => {\n  return (\n    <div>\n      <h1>Video</h1>\n      <VideoPlayer video={useLoaderData()} />\n    </div>\n  );\n}\n\nexport default Video;", "import React from 'react'\nimport videojs from 'video.js'\nimport qualitySelector from 'videojs-hls-quality-selector'\nimport qualityLevels from 'videojs-contrib-quality-levels'\n\nconst VideoPlayer = (video, onReady: Function) => {\n  \n  console.log(video);\n  \n  \n  const videoRef = React.useRef(null)\n  const playerRef = React.useRef<any>(null)\n\n  React.useEffect(() => {\n    if (!playerRef.current) {\n      const videoElement = videoRef.current\n      if (!videoElement) return\n      videojs.registerPlugin('qualityLevels', qualityLevels)\n      videojs.registerPlugin('hlsQualitySelector', qualitySelector)\n\n      const player = (playerRef.current = videojs(\n        videoElement,\n        {\n          autoplay: false,\n          controls: true,\n          responsive: true,\n          fluid: true,\n          sources: [\n            {\n              src: `https://cdn-carine.s3.eu-west-3.amazonaws.com/nft/${video.video.id}/${video.video.filename}.m3u8`,\n              //withCredentials: true\n              // type: 'application/x-mpegURL'\n            }\n          ]\n        },\n        () => {\n          onReady && onReady(player)\n        }\n      ))\n\n      player.hlsQualitySelector({ displayCurrentQuality: true })\n    } else {\n      // you can update player here [update player through props]\n      // const player = playerRef.current;\n      // player.autoplay(options.autoplay);\n      // player.src(options.sources);\n    }\n  }, [videoRef])\n\n  // Dispose the Video.js player when the functional component unmounts\n  React.useEffect(() => {\n    const player = playerRef.current\n\n    return () => {\n      if (player) {\n        player.dispose()\n        playerRef.current = null\n      }\n    }\n  }, [playerRef])\n\n  return (\n    <div data-vjs-player>\n      <video ref={videoRef} className='video-js vjs-big-play-centered' />\n    </div>\n  )\n}\n\nexport default VideoPlayer", "import AWS from 'aws-sdk';\n\nrequire('dotenv').config()\n\nAWS.config.update({\n  region: 'eu-west-3',\n  accessKeyId: process.env.ACCESS_KEY_ID,\n  secretAccessKey: process.env.SECRET_ACCESS_KEY,\n})\n\nconst documentClient = new AWS.DynamoDB.DocumentClient();\n\nexport const getVideos = async () => {\n  const params = {\n    TableName: 'basicVideoTable',\n  };\n\n  let data = await documentClient.scan(params).promise();    \n  const { Items } = data;\n  \n  return Items;\n}\n\ninterface VideoPayload {\n  src: string;\n  id: string;\n  title: string;\n  filename: string;\n}\n\nexport const getVideo = async (id: string) => {\n  const params = {\n    TableName: 'basicVideoTable',\n    Key: { id }\n  };\n\n  let data = await documentClient.get(params).promise();    \n  const { Item } = data;\n  \n  return Item;\n}\n\ninterface VideoPayload {\n  src: string;\n  id: string;\n  title: string;\n  filename: string;\n}\n\n\nexport const addVideo = async ({ src, title, id, filename}: VideoPayload) => {\n  let item = { id, src, title, filename };\n  const docClient = new AWS.DynamoDB.DocumentClient();\n\n  var params = {\n      TableName: 'basicVideoTable',\n      Item: item\n  };\n\n  // Call DynamoDB to add the item to the table\n  docClient.put(params, function (err, data) {\n      if (err) {\n          console.log(\"Error\", err);\n          \n      } else {\n          return data\n      }\n  });\n}", "\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport type { ActionFunction } from \"@remix-run/node\";\nimport {  Form } from \"@remix-run/react\";\nimport type { UploadHandler } from \"@remix-run/server-runtime\";\nimport {\n  json,\n  unstable_composeUploadHandlers as composeUploadHandlers,\n  unstable_createMemoryUploadHandler as createMemoryUploadHandler,\n  unstable_parseMultipartFormData as parseMultipartFormData,\n} from \"@remix-run/node\";import * as Video from '~/utils/videos.server'\n\nimport { s3UploadHandler } from \"~/utils/s3.server\";\nimport { convertVideo } from '~/utils/elemental.server';\nimport Upload from '~/components/display/Upload';\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  let filename = 'video.mp4';\n  const uploadHandler: UploadHandler = composeUploadHandlers((data) => {\n    console.log({ data });\n    \n    filename = data.filename || filename;\n    return s3UploadHandler(data);\n  }, createMemoryUploadHandler());\n\n  const formData = await parseMultipartFormData(request, uploadHandler);\n  const title = formData.get(\"title\")?.toString();\n  const src = formData.get(\"file\")?.toString();\n\n  if (title && src) {\n    const startIndex = src.indexOf('nft/') + 'nft/'.length;\n    const endIndex = src.lastIndexOf('/');\n    const id = src.substring(startIndex, endIndex);\n    \n    await convertVideo({inputFile: src, id, filename})\n    const video = await Video.addVideo({ title, src, id, filename });\n\n    return json({ video });\n  }\n\n  return null;\n}\n\nconst style = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n  display: 'flex',\n  flexDirection: 'column',\n};\n\nconst Create = () => {\n  const [asset, setAsset] = useState<File | null>(null);\n  const [title, setTitle] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const onChangeAsset = async (evt) => {\n    const file = evt?.target?.files?.[0]\n\n    if (!file) return setAsset(null)\n    setAsset(file)\n  }\n\n  return (\n  <Box sx={style}>\n    <Form method=\"post\" action='/create' encType=\"multipart/form-data\">\n    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n      Create a new video\n    </Typography>\n    <Upload\n      sublabel='Add video to upload to S3'\n      name='asset'\n      onChange={onChangeAsset}\n      value={asset}\n      maxSize={52000000000}\n    />\n\n    <TextField\n      id=\"outlined-name\"\n      name='title'\n      color=\"primary\"\n      label=\"Title\"\n      value={title}\n      onChange={handleChange}\n    />\n\n    <Button type='submit'>Submit</Button>\n    </Form>\n  </Box>\n  )\n}\n\nexport default Create\n", "import AWS from \"aws-sdk\"\nimport type { UploadHandler } from \"@remix-run/node\"\nimport { writeAsyncIterableToWritable } from \"@remix-run/node\"\nimport { PassThrough } from \"stream\"\nimport { v1 as uuidv1 } from 'uuid';\n\nconst { ACCESS_KEY_ID, SECRET_ACCESS_KEY } = process.env\n\nif (!(ACCESS_KEY_ID && SECRET_ACCESS_KEY)) {\n  throw new Error(`Storage is missing required configuration.`)\n}\n\nconst uploadStream = ({ Key }: Pick<AWS.S3.Types.PutObjectRequest, 'Key'>) => {\n  const s3 = new AWS.S3({\n    credentials: {\n      accessKeyId: ACCESS_KEY_ID,\n      secretAccessKey: SECRET_ACCESS_KEY,\n    },\n    region: 'eu-west-3',\n  })\n  const pass = new PassThrough()\n  return {\n    writeStream: pass,\n    promise: s3.upload({ Bucket: 'cdn-carine', Key, Body: pass }).promise(),\n  }\n}\n\nexport async function uploadStreamToS3(data: any, filename: string) {\n  const id = uuidv1()\n\n  const stream = uploadStream({\n    Key: `nft/${id}/${filename}`,\n  })\n  await writeAsyncIterableToWritable(data, stream.writeStream)\n  const file = await stream.promise\n  return file.Location\n}\n\nexport const s3UploadHandler: UploadHandler = async ({\n  name,\n  filename,\n  data,\n}) => {\n  if (name !== \"file\") {\n    return undefined;\n  }\n  \n  const uploadedFileLocation = await uploadStreamToS3(data, filename!)\n  return uploadedFileLocation\n}", "import AWS, { MediaConvert} from \"aws-sdk\"\n\nconst { ACCESS_KEY_ID, SECRET_ACCESS_KEY } = process.env\n\nif (!(ACCESS_KEY_ID && SECRET_ACCESS_KEY)) {\n  throw new Error(`Storage is missing required configuration.`)\n}\n\nAWS.config.update({\n  region: 'eu-west-3',\n  accessKeyId: process.env.ACCESS_KEY_ID,\n  secretAccessKey: process.env.SECRET_ACCESS_KEY,\n})\n\nconst converter = new MediaConvert({ apiVersion: '2017-08-29' });\n\nconst getEnpoints =\nasync (): Promise<MediaConvert.__listOfEndpoint | void> => {\n  // Create empty request parameters\n  const params = {\n    MaxResults: 0,\n  };\n\n  try {\n    const { Endpoints } = await converter\n      .describeEndpoints(params)\n      .promise();\n    console.log('Your MediaConvert endpoint is ', Endpoints);\n    \n    if (Endpoints && Endpoints.length > 0) {\n      AWS.config.mediaconvert = {endpoint : Endpoints[0].Url};\n    }\n    return Endpoints;\n  } catch (err) {\n    console.log('MediaConvert Error', err);\n  }\n};\n\ninterface convertPayload {\n  inputFile: string;\n  id: string;\n  filename: string;\n}\nexport const convertVideo = async ({\n  inputFile,\n  id,\n  filename,\n}: convertPayload): Promise<MediaConvert.__listOfJob | void> => {\n  await getEnpoints();\n  // Create empty request parameters\n  const params = {\n    \"Queue\": \"arn:aws:mediaconvert:eu-west-3:602259669540:queues/Default\",\n    \"UserMetadata\": {},\n    \"Role\": \"arn:aws:iam::602259669540:role/service-role/MediaConvert_Default_Role\",\n    \"Settings\": {\n      \"TimecodeConfig\": {\n        \"Source\": \"ZEROBASED\"\n      },\n      \"OutputGroups\": [\n        {\n          \"CustomName\": \"Coucou\",\n          \"Name\": \"Apple HLS\",\n          \"Outputs\": [\n            {\n              \"ContainerSettings\": {\n                \"Container\": \"M3U8\",\n                \"M3u8Settings\": {}\n              },\n              \"VideoDescription\": {\n                \"CodecSettings\": {\n                  \"Codec\": \"H_264\",\n                  \"H264Settings\": {\n                    \"FramerateControl\": \"INITIALIZE_FROM_SOURCE\",\n                    \"RateControlMode\": \"QVBR\",\n                    \"SceneChangeDetect\": \"TRANSITION_DETECTION\",\n                    \"QualityTuningLevel\": \"MULTI_PASS_HQ\"\n                  }\n                }\n              },\n              \"AudioDescriptions\": [\n                {\n                  \"CodecSettings\": {\n                    \"Codec\": \"AAC\",\n                    \"AacSettings\": {\n                      \"Bitrate\": 96000,\n                      \"CodingMode\": \"CODING_MODE_2_0\",\n                      \"SampleRate\": 48000\n                    }\n                  }\n                }\n              ],\n              \"OutputSettings\": {\n                \"HlsSettings\": {}\n              }\n            }\n          ],\n          \"OutputGroupSettings\": {\n            \"Type\": \"HLS_GROUP_SETTINGS\",\n            \"HlsGroupSettings\": {\n              \"SegmentLength\": 2,\n              \"Destination\": `s3://cdn-carine/nft/${id}/`,\n              \"MinSegmentLength\": 0\n            }\n          },\n          \"AutomatedEncodingSettings\": {\n            \"AbrSettings\": {}\n          }\n        }\n      ],\n      \"Inputs\": [\n        {\n          \"AudioSelectors\": {\n            \"Audio Selector 1\": {\n              \"DefaultSelection\": \"DEFAULT\"\n            }\n          },\n          \"VideoSelector\": {},\n          \"TimecodeSource\": \"ZEROBASED\",\n          \"FileInput\": inputFile\n        }\n      ]\n    },\n    \"BillingTagsSource\": \"JOB\",\n    \"AccelerationSettings\": {\n      \"Mode\": \"DISABLED\"\n    },\n    \"StatusUpdateInterval\": \"SECONDS_60\",\n    \"Priority\": 0\n  }\n\n  try {\n    console.log('coucou');\n    \n    const endpointPromise = await converter\n      .createJob(params)\n      .promise()\n      .then(\n        function(data) {\n          console.log(\"Job created! \", data);\n          return data\n        },\n        function(err) {\n          console.log(\"Error\", err);\n          return err\n        }\n      );\n    \n      console.log({ endpointPromise });\n      \n    return endpointPromise;\n  } catch (err) {\n    console.log('MediaConvert Error', err);\n  }\n}\n", "import { useState, useMemo } from 'react'\n\nconst TYPES = {\n  'image/png': 'image',\n  'image/jpeg': 'image',\n  'image/jpg': 'image',\n  'image/webp': 'image',\n  'image/gif': 'image',\n  'video/mp4': 'video',\n  'video/quicktime': 'video',\n  'video/mov': 'video'\n}\n\nexport default function FileUpload(props) {\n  const {\n    value,\n    onChange,\n    label,\n    sublabel,\n    maxSize = 40000000,\n    acceptTypes = 'image/*,.mp4,.mov',\n    description = 'PNG, GIF, WEBP or MP4.',\n    isMultiple = false,\n    hasPreview = true\n  } = props\n\n  const [sizeReached, setSizeReached] = useState(false)\n\n  const [id] = useState(Math.random().toString(36))\n\n  const onFileChange = (e) => {\n    const file = e?.target?.files ? e.target.files[0] : null\n    if (file && maxSize && file.size >= maxSize) {\n      return setSizeReached(true)\n    }\n    setSizeReached(false)\n    onChange(e)\n  }\n\n  const assetPreview = (asset) => {\n    if (!asset) return null\n    const type = TYPES[asset?.type] || 'image'\n    const previewClass = 'w-full max-w-max\tborder-black rounded border flex-grow max-h-96'\n\n    return type === 'image' ? (\n      <img src={asset && URL.createObjectURL(asset)} alt='preview-unlockable' className={previewClass} />\n    ) : (\n      <video autoPlay muted loop playsInline src={asset && URL.createObjectURL(asset)} className={previewClass}></video>\n    )\n  }\n\n  const preview = useMemo(() => {\n    return assetPreview(value)\n  }, [value])\n\n  const isGb = maxSize && maxSize >= 1000000000\n\n  return (\n    <div className={`my-4 w-full flex flex-col`}>\n      <div className='mb-2'>{label}</div>\n      {!preview && sublabel && <div className='text-gtxt text-sm mb-4'>{sublabel}</div>}\n\n      {hasPreview && (\n        <>\n          {preview || (\n            <label\n              htmlFor={id}\n              className='w-full h-40 rounded bg-g text-gtxt flex-grow flex flex-col items-center justify-center cursor-pointer '\n            >\n              <img src='/images/upload.svg' alt='file-upload-icon' />\n              {`${description} Max ${new Intl.NumberFormat('en-US', {\n                style: 'unit',\n                unit: isGb ? 'gigabyte' : 'megabyte',\n                maximumSignificantDigits: isGb ? 2 : 1,\n                unitDisplay: 'short'\n              }).format(maxSize / (isGb ? 1000000000 : 1000000))}`}\n            </label>\n          )}\n          {preview && (\n            <p className='mt-4 text-sm text-primary hover:underline' onClick={onChange}>\n              Remove\n            </p>\n          )}\n        </>\n      )}\n\n      <input\n        type='file'\n        name='file'\n        multiple={isMultiple}\n        id={id}\n        onChange={onFileChange}\n        className='hidden'\n        accept={acceptTypes}\n      />\n\n      {sizeReached && (\n        <p className='text-red mt-2'>\n          File size must be maximum of{' '}\n          {new Intl.NumberFormat('en-US', {\n            style: 'unit',\n            unit: isGb ? 'gigabyte' : 'megabyte',\n            maximumSignificantDigits: isGb ? 2 : 1,\n            unitDisplay: 'short'\n          }).format(maxSize / (isGb ? 1000000000 : 1000000))}\n        </p>\n      )}\n    </div>\n  )\n}\n", "import 'video.js/dist/video-js.css'\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, NavLink } from \"@remix-run/react\";\nimport Button from '@mui/material/Button';\n\nimport Nav from '~/components/Nav';\nimport List from '~/components/List';\nimport { getVideos } from \"~/utils/videos.server\";\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const videos = await getVideos();\n  if (!videos) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  // console.log(videos, request);\n  \n  return json(videos);\n};\n\nexport default function Index() {\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n       <div className='p-4 border-b-1 border-black'>\n        <Button variant=\"contained\"><NavLink to='create'>Upload video</NavLink></Button>\n       </div>\n      <List videos={useLoaderData()} />\n    </div>\n  );\n}\n", "import { NavLink } from \"@remix-run/react\";\n// import { videos } from './data'\n\nconst List = ({ videos }) => {\n  return (\n    <div>\n      <h1>List</h1>\n      <div className=\"flex flex-wrap px-4 justify-between\">\n        {videos.map((video, index) => (\n          <div key={video.id} className='cursor-pointer'>\n            <NavLink to={`/video/${video.id}`}>\n              <img src={`https://picsum.photos/300/200?random=${index}`} alt={video.title} />\n              <h2>{video.title}</h2>\n            </NavLink>\n            </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default List;", "export default {'version':'3edf8c8a','entry':{'module':'/build/entry.client-VJESTZ7U.js','imports':['/build/_shared/chunk-JIWXM5LB.js','/build/_shared/chunk-GIY4UAGX.js','/build/_shared/chunk-BLIGAOTS.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-4YD2772X.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/create':{'id':'routes/create','parentId':'root','path':'create','index':undefined,'caseSensitive':undefined,'module':'/build/routes/create-ZUDYXC76.js','imports':['/build/_shared/chunk-YV6SFERB.js','/build/_shared/chunk-TCZGRP7C.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-LJ36XZ6Q.js','imports':['/build/_shared/chunk-YV6SFERB.js','/build/_shared/chunk-TCZGRP7C.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/video/$videoId':{'id':'routes/video/$videoId','parentId':'root','path':'video/:videoId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/video/$videoId-OEYHTKGN.js','imports':['/build/_shared/chunk-TCZGRP7C.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-3EDF8C8A.js'};", "\nimport * as entryServer from \"/Users/carine/Desktop/video-converter/app/entry.server.tsx\";\nimport * as route0 from \"/Users/carine/Desktop/video-converter/app/root.tsx\";\nimport * as route1 from \"/Users/carine/Desktop/video-converter/app/routes/video/$videoId.tsx\";\nimport * as route2 from \"/Users/carine/Desktop/video-converter/app/routes/create.tsx\";\nimport * as route3 from \"/Users/carine/Desktop/video-converter/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/video/$videoId\": {\n      id: \"routes/video/$videoId\",\n      parentId: \"root\",\n      path: \"video/:videoId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/create\": {\n      id: \"routes/create\",\n      parentId: \"root\",\n      path: \"create\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    }\n  };"],
  "mappings": "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",
  "names": []
}
